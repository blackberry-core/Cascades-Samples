/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page compass
    \example compass
    \title Compass Example

    \section1 Description

    The Compass example demonstrates how to use sensors from the QtSensors module to
    implement a compass UI.

    \image compass-example.png

    \section1 Overview
    In this example we'll learn how to use the QCompass, QCompassFilter and QCompassReading
    classes to implement a simple compass UI in Cascades.

    \section1 The UI
    The UI of this sample application consists of an \c ImageView that shows the compass rose and
    a \c Label that shows the current angle in degree.

    The business logic of the application is encapsulated in the CompassSensor class which is made available
    to the UI under the name '_compass'.

    \snippet compass/assets/main.qml 0

    The compass rose image is rotated according to the azimuth angle as reported by the sensor object. To avoid
    the implicit animation on the 0 <-> 360 degree switch, we disable the implicit animation for the 'rotationZ'
    property explicitly.

    \snippet compass/assets/main.qml 1

    The \c Label shows the current azimuth angle as reported by the sensor object.

    \section1 CompassSensor

    The \c CompassSensor encapsulates the business logic of the application. It contains a QCompass object, which does
    the low-level communication with the compass sensor of the device, and provides a property 'azimuth' to make the
    retrieved sensor data available to the UI.
    It inherits from QCompassFilter and reimplements the 'bool filter(QCompassReading*)' method to retrieve the sensor
    data from the QCompass object.

    \snippet compass/src/CompassSensor.hpp 0

    Inside the constructor we try to connect the QCompass object to the hardware backend. If that's successful, we register
    the CompassSensor class as filter for the QCompass object and start the sensor to gather data.

    \snippet compass/src/CompassSensor.cpp 0

    The 'bool filter(QCompassReading*)' method is called whenever the QCompass object retrieved new data from the hardware sensor.
    Inside this method we update our internal azimuth property with the new value from the sensor and emit
    the change notification signal if the new value differs from the previous one.

    \snippet compass/src/CompassSensor.cpp 1
*/
