/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page accelgame
    \example accelgame
    \title Accel Game Example

    \section1 Description

    The Accel Game example demonstrates how to use sensors from the QtSensors module to
    move a player through a maze.

    \image accelgame-example.png

    \section1 Overview
    In this example we'll learn how to use the QAccelerometerSensor, QAccelerometerFilter and QAccelerometerReading
    classes to retrieve the current x/y/z values from the accelerometer sensor of the device. The values are used
    to trigger an direction change or move of the player inside the maze.

    \section1 The UI
    The UI of this sample application consists of a custom component (Maze.qml) that represents the maze board and
    a \c Button to start a new game.

    The business logic of the application is encapsulated in the \c GameController class which is made available
    to the UI under the name '_gameController'.

    \snippet accelgame/assets/main.qml 0

    The custom Maze component is placed at the left hand side of the screen and simply contains a background image
    and a \c Container with the object name 'board', which will be accessed from the business logic to place the stones
    and player items on it.

    \snippet accelgame/assets/Maze.qml 0

    The button simply invokes the newGame() method of the \c GameController object when the user clicks on it.

    \snippet accelgame/assets/main.qml 1

    \section1 Player
    The \c Player class encapsulates the business logic of a player on the maze board.
    It provides methods to change direction and position of the player.

    \snippet accelgame/src/player.hpp 0

    The \c Player class also stores a reference to the UI object (\c ImageView) that represents the player
    on the screen.

    Inside the constructor we create the \c ImageView, load the player image and add it to the \c Container
    that acts as board.

    \snippet accelgame/src/player.cpp 0

    If the \c goUp() method is invoked, we simply forward this to a parameterized call of the \c go() method,
    in which all the movement handling of the player is calculated.

    \snippet accelgame/src/player.cpp 2

    In the \c go() method we update the current direction and then calculate the new position depending on our current
    position and the current direction.
    If the \c canMoveTo() method of the \c Board object returns \c true (that means there is no wall)
    for the new position, we update our position.
    Afterwards we update the UI by starting an animation that will move the player item (\c ImageView) to the new
    position and applies a rotation if necessary.

    \snippet accelgame/src/player.cpp 1

    \section1 Board
    The \c Board class contains all the business logic for handling the maze board.
    It generates a distribution of blocks on the maze and the tiles (\c ImageViews) that are displayed
    in the UI.

    \snippet accelgame/src/board.hpp 0

    Inside the constructor we fill the board representation (a QVector<QVector<bool>>) with \c false to mark
    the complete board as empty. Later on we'll change the values to \c true at the positions where a wall is located.

    \snippet accelgame/src/board.cpp 0

    The \c canMoveTo() method returns whether there is no wall at the requested position and therefor we can move
    the player there.

    \snippet accelgame/src/board.cpp 1

    The \c reset() method rebuilds the layout of the maze by placing a couple of walls at random positions.

    \snippet accelgame/src/board.cpp 2

    \section1 GameController
    The \c GameController is the central class of this application.
    It contains the objects that encapsulate the business logic (\c Board and \c Player)
    and the \c AccelerationSensor, which triggers the movement of the player.

    \snippet accelgame/src/gamecontroller.hpp 0

    Inside the constructor we start the acceleration sensor, so that we can access the current data
    from the hardware later on.

    \snippet accelgame/src/gamecontroller.cpp 0

    The \c setBoard() method is called after the UI has been initialized. We store the pointer to the \c Container
    that represents the maze here and create the \c Board and \c Player business logic objects.
    Since we want the animation of a player move to finish before we start the next animation, the evaluation of
    the acceleration sensor is not time driven but depends on the \c moved() signal of the \c Player object, which
    is emitted after a move animation has been finished. However for the initial case we have to call \c evaluateInput()
    explicitly.

    \snippet accelgame/src/gamecontroller.cpp 1

    Inside \c evaluateInput() we simply call the different move methods on the \c Player object depending on the
    current values reported by the \c AccelerationSensor.

    \snippet accelgame/src/gamecontroller.cpp 3

    If the user clicks the 'New Game' button, the \c newGame() method is invoked, where we reset the board to regenerate
    a random maze and set the player back at its start position.

    \snippet accelgame/src/gamecontroller.cpp 2

    \section1 AccelerationSensor

    The \c AccelerationSensor class encapsulates the data gathering of the application. It contains a QAccelerometerSensor object, which does
    the low-level communication with the accelerometer sensor of the device, and provides the three properties 'x', 'y' and 'z' to make the
    current acceleration value available to the UI.
    It inherits from QAccelerometerFilter and reimplements the 'bool filter(QAccelerometerReading*)' method to retrieve the sensor
    data from the QAccelerometerSensor object.

    \snippet accelgame/src/accelerationsensor.hpp 0

    Inside the constructor we try to connect the QAccelerometerSensor object to the hardware backend. If that's successful, we register
    the \c AccelerationSensor class as filter for the QAccelerometerSensor object and start the sensor to gather data.

    \snippet accelgame/src/accelerationsensor.cpp 0

    The 'bool filter(QAccelerometerReading*)' method is called whenever the QAccelerometerSensor object retrieved new data from the
    hardware sensor.
    Inside this method we update the properties with the data from the sensor and inform the UI about possible value changes.

    \snippet accelgame/src/accelerationsensor.cpp 1
*/
