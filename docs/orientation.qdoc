/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page orientation
    \example orientation
    \title Orientation Example

    \section1 Description

    The Orientation example demonstrates how to use sensors from the QtSensors module to
    find out about the current orientation of the device.

    \image orientation-example.png

    \section1 Overview
    In this example we'll learn how to use the QOrientationSensor, QOrientationFilter and QOrientationReading
    classes to retrieve the current orientation from the orientation sensor of the device. Depending of
    the current orientation we show a different text in the UI.

    \section1 The UI
    The UI of this sample application is really simple and just consists of a \c Label that shows the current
    orientation as text.

    The business logic of the application is encapsulated in the \c OrientationSensor class which is made available
    to the UI under the name '_sensor'.

    \snippet orientation/assets/main.qml 1

    The text property of the \c Label is bound against the 'orientation' property of the \c OrientationSensor object, so
    that it is updated automatically whenever the orientation changes. To make it a bit more fancy we use a zoom-in animation
    when changing the text.

    \snippet orientation/assets/main.qml 0

    To execute the animation at the right time we connect the orientationChanged() signal of the \c OrientationSensor against the
    play() function of the \c ScaleTransition.

    \section1 OrientationSensor

    The \c OrientationSensor class encapsulates the business logic of the application. It contains a QOrientationSensor object, which does
    the low-level communication with the orientation sensor of the device, and provides a property 'orientation' to make the
    current orientation value available to the UI.
    It inherits from QOrientationFilter and reimplements the 'bool filter(QOrientationReading*)' method to retrieve the sensor
    data from the QOrientationSensor object.

    \snippet orientation/src/OrientationSensor.hpp 0

    Inside the constructor we try to connect the QOrientationSensor object to the hardware backend. If that's successful, we register
    the \c OrientationSensor class as filter for the QOrientationSensor object and start the sensor to gather data.

    \snippet orientation/src/OrientationSensor.cpp 0

    The 'bool filter(QOrientationReading*)' method is called whenever the QOrientationSensor object retrieved new data from the hardware sensor.
    Inside this method we simply map the sensor values to our property and notify the UI about possible changes.

    \snippet orientation/src/OrientationSensor.cpp 1
*/
