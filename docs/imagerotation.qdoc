/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page imagerotation
    \example imagerotation
    \title Image Rotation Example

    \section1 Description

    The Image Rotation example demonstrates how to use sensors from the QtSensors module to
    always show an image upright on the screen independently of the current device orientation.

    \image imagerotation-example.png

    \section1 Overview
    In this example we'll learn how to use the QRotationSensor, QRotationFilter and QRotationReading
    classes calculate the angle between the reference position of the device and its current position
    to display an image upright on the screen.

    \section1 The UI
    The UI of this sample application simply consists of an \c ImageView that shows the image in the center
    of the screen.

    The business logic of the application is encapsulated in the \c RotationSensor class which is made available
    to the UI under the name '_sensor'.

    \snippet imagerotation/assets/main.qml 0

    The image is rotated according to the rotation angle as reported by the sensor object. To avoid
    the implicit animation on the 0 <-> 360 degree switch, we disable the implicit animation for the 'rotationZ'
    property explicitly.

    \section1 RotationSensor

    The \c RotationSensor encapsulates the business logic of the application. It contains a QRotationSensor object, which does
    the low-level communication with the rotation sensor of the device, and provides a property 'rotation' to make the
    calculated angle available to the UI.
    It inherits from QRotationFilter and reimplements the 'bool filter(QRotationReading*)' method to retrieve the sensor
    data from the QRotationSensor object.

    \snippet imagerotation/src/rotationsensor.hpp 0

    Inside the constructor we try to connect the QRotationSensor object to the hardware backend. If that's successful, we register
    the \c RotationSensor class as filter for the QRotationSensor object and start the sensor to gather data.

    \snippet imagerotation/src/rotationsensor.cpp 0

    The 'bool filter(QRotationReading*)' method is called whenever the QRotationSensor object retrieved new data from the hardware sensor.
    Inside this method we calculate the rotation angle by comparing the reported x and y values.

    \snippet imagerotation/src/rotationsensor.cpp 1
*/
