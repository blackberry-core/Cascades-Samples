/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page nowplaying
    \example nowplaying
    \title NowPlaying Example

    \section1 Description

    The NowPlaying example demonstrates how to use the multimedia framework of BB10
    to provide extended information in the UI about the media currently played and
    to control the media player with hardware keys.

    \image nowplaying-example.png

    \section1 Overview
    In this example we'll learn how to use the \c MediaPlayer and NowPlayingConnection classes,
    to show extended information about the currently played media in the menu bar of the home
    screen (see play icon in the screenshot below) and react to the hardware buttons to pause/resume
    the playback of the media.

    \image nowplaying-example2.png

    The \c NowPlayingConnection class acts as an mediator between the \c MediaPlayer and the
    BB10 system. It provides signals that are emitted whenever the user triggers some actions
    (e.g. pauses or resumes the playback via hardware button) and it provides properties that
    can be modified to show data about the media in the media area in the menu bar of the home screen.
    However the \c NowPlayingConnection can also be used to control a \c MediaPlayer programatically.

    \section1 UI
    The UI of this sample application consists of an \c ImageButton that reflects the current state
    of the \c MediaPlayer and is also used to start and stop the playback. At the bottom of the
    screen a progress bar is located to visualize the current progress of the playback.

    \snippet nowplaying/assets/main.qml 0

    The 'defaultImageSource' property of the \c ImageButton depends on the 'mediaState' property of
    the \c MediaPlayer. So whenever the player changes its state, the \c ImageButton will show the corresponding
    image. If the user clicks on the button, we invoke the acquire() (play) or revoke() (stop) methods on the
    \c NowPlayingConnection depending on the current state of the \c MediaPlayer.

    \image nowplaying-example1.png

    The \c MediaPlayer object is created as an attached object to the page. It plays a sound file that
    is specified at its 'sourceUrl' property.

    \snippet nowplaying/assets/main.qml 2

    The \c NowPlayingConnection object is created as an attached object as well. Its 'duration' and 'position'
    properties are bound against the 'duration' and 'position' properties of the \c MediaPlayer, so that whenever
    the progress of the media player changes, the data in the \c NowPlayingConnection object are updated automatically.
    For each signal of the \c NowPlayingConnection object, a signal handler has been defined to start, stop, pause or resume
    the playback.

    As you can see, we never control the playback of the \c MediaPlayer directly, we always go through the \c NowPlayingConnection.

    \snippet nowplaying/assets/main.qml 3

    The progress bar is a custom component that is implemented in ProgressBar.qml

    \snippet nowplaying/assets/main.qml 1

    We bind the 'duration' and 'position' properties of the \c NowPlayingConnection object against its custom properties,
    so that the progress bar can visualize these data.

    \snippet nowplaying/assets/ProgressBar.qml 0

    The progress bar consist of a \c ProgressIndicator and a \c Label. We define the range of the \c ProgressIndicator to
    be between '0' and the duration of the media. The current value is indirectly bound against the 'position' property
    of the \c NowPlayingConnection object.

    The \c Label displays the current position by formatting the milliseconds into "mm:ss" format.
*/
