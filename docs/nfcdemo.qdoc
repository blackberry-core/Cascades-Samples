/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page nfcdemo
    \example nfcdemo
    \title NFC Demo

    \section1 Description

    The nfc example allows a user to exchange content, such as messages or files with another 
    NFC enabled device, or just to simply read data from NFC tags.

    \image nfcdemo-example.png
    \image nfcdemo-example1.png
    \image nfcdemo-example2.png

    \section1 Overview
    In this example we'll learn how to use the \c NfcShareManager to share data and files by
    tapping NFC enabled device or NFC tag. Concurrently, we will also demonstrate data 
    sharing(SNEP protocol) using the BPS library.

    \section1 The UI
    The UI of this sample application consists of 4 tabs that represent different functionality:
    'MAC Address', 'Sender', 'Receiver', and 'Share'.

    MAC Address

    \snippet nfcdemo/assets/MacAddressPage.qml 0
    
    This tab contains a label which updates with the MAC address of the remote NFC enabled device
    that you tap. This exchange is done upon sensing a NFC target and successfully establishing
    a NFC connection.

    Sender

    \snippet nfcdemo/assets/SenderPage.qml 0

    This tab contains a \c TextField and a \c Label with the usage description. Once the user enters
    some text into the field, this data will be shared with another NFC enabled device, or written to
    an NFC tag (through tag writing).

    Receiver

    \snippet nfcdemo/assets/ReceiverPage.qml 0

    This tab is intended to display the properties of the NDEF message, which is shared via some NFC
    tag, or shared data from another NFC enabled device. The NDEF message records, containing the
    property information, are displayed through a \c ListView.

    Share

    This tab is used to share data or files by using the \c NfcShareManager, this being an alternative to
    the BPS library used in the other tabs to achieve the same functionality. The page contains a
    \c TextField for data input or uses a \c FilePicker to select the file(s) to be shared.     

    We export all the C++ classes corresponding to the above mentioned functionalities into QML, under
    their respective names "_macAddressHandler, _nfcReceiver, _nfcSender, and _nfcShareHandler" as context
    property insode the main.cpp function.

    \snippet nfcdemo/src/main.cpp 0

    Inside the QML pages for each tab, we simply bind the properties of the labels, text fields or data models
    to their corresponding exported properties. Which invokes automatically the functionality upon user interaction
    or the display of received data. For example, in the Sender page the onTextChanging handler assigns the text from
    the TextField to the "_nfcSender.payload" property, the payload(data) in turn is pushed to another NFC device upon 
    establishing a connection.

    \section1 MacAddressHandler

    This class is tasked with the acquisition of the MAC address, it does so using the Bps library by initializing it, 
    registering with the nfc domain and dealing with the nfc handover to acquire the mac address.

    \snippet nfcdemo/src/MacAddressHandler.cpp 0

    This snippet does the initial Bps initialization for use with the current thread and registers with the NFC domain 
    in order to receive nfc events, plus it registers the bluetooth handover listener.

    \snippet nfcdemo/src/MacAddressHandler.cpp 1

    Once the handover has been confirmed and completed, the bluetooth handover data is parsed specifically to extract
    the mac address value. Which is than formatted into a QString for display by emiting the macAddressChanged() signal,
    with the string as its argument.

    \section1 NfcSender

    The following class is responsible for sending a text payload, using the NFC SNEP push protocol, to another NFC
    enabled device, or to write to an NFC tag.

    \snippet nfcdemo/src/NfcSender.cpp 0

    This code does the Bps initialization for use with the current thread and subscribes to receive NFC events and
    registers as a snep client.

    \snippet nfcdemo/src/NfcSender.cpp 1

    This method listens to the NFC events, and upon receiving a successful NFC SNEP connection it invokes the
    handleSnepPush() method to deal with sending the data.

    \snippet nfcdemo/src/NfcSender.cpp 2

    This method creates a ndefrecord that houses the payload (data), this record is than added to a standard ndefmessage
    which is than pushed to the other device using the SNEP protocol.

    \section1 NfcReceiver

    This class retrieves the NdefMessage being transmitted, extracts its properties and displays them on the screen.

    \snippet nfcdemo/src/NfcReceiver.cpp 0

    Inside the constructor the \c InvokeManager is initialized, from whom we listen for invoke requests.

    \snippet nfcdemo/src/NfcReceiver.cpp 1

    This method exttracts the data portion of the request, which is the \c QNdefMessage we have been waiting for. Afterwards,
    it access' the record entries from the message and saves them in the \c QVariantListDataModel for display.

    \section1 NfcShareHandler

    The \c NfcShareHandler class performs sharing of data and files over NFC, with some similarity to NfcSender, the difference being
    the underlying mechanism used to perform this sharing. Instead of using the Bps library, it uses the \c NfcShareManager to achieve the
    same result, but with a more convenient way. The \c NfcShareManager will allow sharing data to either a tag (through tag writing) or
    to another device (SNEP Push) behind the scenes.

    \snippet nfcdemo/src/NfcShareHandler.cpp 0

    The constructor initializes it's member variables, including the \c NfcShareManager and makes the signal/slot connections.

    \snippet nfcdemo/src/NfcShareHandler.cpp 1

    Clients specify the data they want to share by creating an instance of NfcShareDataContent, populating it with data, and passing the object 
    to NfcShareManager::setShareContent(const NfcShareDataContent &). A request must contain a valid combination of MIME type, data and URI fields.
    
    \snippet nfcdemo/src/NfcShareHandler.cpp 2

    Defines a request to share local files over NFC.

    The files are given through the \c FileListModel, which is populated using \c FilePicker. The files you wish to share are specified by creating an 
    instance of NfcShareFilesContent, populating it with file paths in URI form, and passing the object to NfcShareManager::setShareContent(const NfcShareFilesContent &).
    
    Note that a request must contain at least one file to be valid.

    \snippet nfcdemo/src/NfcShareHandler.cpp 3

    When the share completes, either the sharingFinished() or sharingError() is invoked, depending which signal we receive. In both cases we check the
    types of events that are received and formulate a proper notification to be displayed using the \c SystemToast.

    \snippet nfcdemo/src/NfcShareHandler.cpp 4

    This method allows for the switching between the different types of share modes, the modes being data or file sharing. This is done in the \c SegmentedControl, located in SharePage.qml,
    by invoking this method when the onSelectedValueChanged() slot is invoked. Once the mode has been chosen, either the prepareDataShareContent() or prepareFileShareContent() is invoked.
  
*/
