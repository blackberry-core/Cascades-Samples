/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page invocableservice
    \example invocableservice
    \title Invocable Service Example

    \section1 Description

    The Invocable Service example demonstrates how to create, register a invocable service
    and how to call into that service using the invokation framework to trigger desired service
    functionality.

    \image invocableservice-example.png

    \section1 Overview
    In this example we'll learn how to create a service and how to invoke the service functionality
    through the invocation framework.

    The service business logic is implemented in the C++ class \c Service, whereas, the invocation logic is
    located in the the \c AppUI class.

    \section1 UI
    The UI of this sample application consists of one page. This page allows the user to configure a 5 sec delay
    from the time the invocation request is received by the service to the time it executes that request. This
    page also has the 3 image buttons which represent the different functionalities you can request the service
    to perform.

    The UI is written entirely in QML.

    \snippet invocableservice/assets/main.qml 0

    \section1 AppUI

    \c AppUI class encapsulates the UI creation content, dealing with configuration (i.e. delay), and creating/invoking
    the various requests.

    Inside the constructor the page content creation is called and property values are initialized with default values.

    \snippet invocableservice/src/AppUI.cpp 0

    Whenever the user triggers one of the image buttons the corresponding \c InvokeRequest is created and invoked using
    the \c InvokeManager class.

    \snippet invocableservice/src/AppUI.cpp 2

    \snippet invocableservice/src/AppUI.cpp 3

    \snippet invocableservice/src/AppUI.cpp 4

    The sleep configuration toggles the sleep data which dictates a delay before the service executes the request.

    \snippet invocableservice/src/AppUI.cpp 5

    \section1 Service

    \c Service is the central class in this application. It provides all the functionality and executes them upon requests
    that it receives from the invocation framework.

    In the constructor it initializes property values with their default values and establishes the connection to the invocation
    manager in order to listen to incoming requests, specific to this service.

    \snippet invocableservice/src/Service.cpp 0

    The following method verifies the correct target request, and mathes the request with its specific service function. It also
    access' the request's data to enable/disable the delay to function execution.

    \snippet invocableservice/src/Service.cpp 1

    These methods represent the various functions the service can execution upon invocation framework requests. Making use of
    the various functionality provided by the platform, from led, system sound to phone vibration control.

    \snippet invocableservice/src/Service.cpp 2

    \snippet invocableservice/src/Service.cpp 3

    \snippet invocableservice/src/Service.cpp 4
*/
