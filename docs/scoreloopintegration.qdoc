/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page scoreloopintegration
    \example scoreloopintegration
    \title Scoreloop Integration Example

    \section1 Description

    The Scoreloop Integration Example retrieves the user name from the Scoreloop
    gaming service.

    \image scoreloopintegration-example.png

    \section1 Overview
    In this example we'll learn how to use the Scoreloop API of the BB10 platform to
    retrieve the user name that is associated with the device. Currently the BB10 platform
    provides only a C API for accessing the Scoreloop service, so this example contains some
    glue code to intermediate between the C API and the QML UI.

    \section1 The UI
    The UI of this sample application consists of a single page with a \c Label that shows
    the user name and a \c Button to reload the user name from the Scoreloop service.

    The business logic of this application is encapsulated in the C++ class \c ScoreloopData,
    which is exported to the UI under the name '_scoreloop'.

    \snippet scoreloopintegration/assets/main.qml 0

    The \c ScoreloopData object provides a property 'userName' that is either empty (if no name has been
    loaded yet from the service) or contains the name that the Scoreloop service has associated with this
    device. We simply bind this property against the 'text' property of the \c Label for automatic updates.

    \snippet scoreloopintegration/assets/main.qml 1

    Whenever the user clicks on the 'Reload' button, we invoke the load() method of the \c ScoreloopData
    object, which will trigger the reload of the user name from the Scoreloop service.

    \section1 The ScoreloopSampleCascades class
    The \c ScoreloopSampleCascades class is the central class which creates the UI and initializes the
    connection to the Scoreloop service.

    \snippet scoreloopintegration/src/ScoreloopSampleCascades.hpp 0

    Inside the constructor the SC_InitData_Init method of the Scoreloop C API is used to initialize
    the data structures and with SC_Client_New a new connection to the Scoreloop service is established.
    The parameters of this method describe the game you want to use the Scoreloop service for, in this example
    we use the SL Demo TNG game as dummy data.

    \snippet scoreloopintegration/src/ScoreloopDefines.hpp 0

    If the connection has been established successfully, a \c ScoreloopBpsEventHandler object is created, which
    integrates the Scoreloop event handler with the BPS event loop (see below), and the \c ScoreloopData object
    is instantiated and the initial load of the user name is triggered.

    \snippet scoreloopintegration/src/ScoreloopSampleCascades.cpp 0

    After the initialization of the business logic has been finished, the UI is loaded from main.qml and the \c ScoreloopData
    object is exported to QML.

    \section1 The ScoreloopBpsEventHandler class
    The \c ScoreloopBpsEventHandler class integrates the Scoreloop event handler with the BPS event loop. For this, it
    inherits from \c bb::AbstractBpsEventHandler and reimplements the virtual event() method.

    \snippet scoreloopintegration/src/ScoreloopBpsEventHandler.hpp 0

    Inside the constructor we subscribe to the Scoreloop event domain, so that the event() method will be invoked whenever
    an event from this domain is handled by the BPS event loop.

    \snippet scoreloopintegration/src/ScoreloopBpsEventHandler.cpp 0

    Whenever the event() method is called, we forward the event object to the Scoreloop event handler.

    \snippet scoreloopintegration/src/ScoreloopBpsEventHandler.cpp 1

    \section1 The ScoreloopData class
    The \c ScoreloopData class encapsulates the access to the Scoreloop service and provides the high-level API of properties,
    signals and slots to the UI. To keep the code simple in this example, we only provide access to the user name through a property
    and offer a slot to trigger a reload of the user name from the service.

    \snippet scoreloopintegration/src/ScoreloopData.hpp 0

    Inside the constructor we create a Scoreloop UserController (which provides access to various user specific information) and
    store the handle to it in a member variable. Since the communication with the Scoreloop service is asynchonous, a callback method
    must be passed, which will be invoked whenever the user object changes.

    \snippet scoreloopintegration/src/ScoreloopData.cpp 1

    When the user clicks on the 'Reload' button in the UI, the load() slot is invoked, which calls the SC_UserController_LoadUser() method
    from the Scoreloop API. This call starts the asynchronous loading of the user information and will invoke the previously registered callback.

    \snippet scoreloopintegration/src/ScoreloopData.cpp 2

    Inside the callback we use the SC_UserController_GetUser() method to retrieve the handle of the user from the controller and we
    emit the userNameChanged() signal to inform the UI that the user name has changed resp. is available now.

    \snippet scoreloopintegration/src/ScoreloopData.cpp 3

    The UI will call the userName() method to update the text of the \c Label. Inside this method we retrieve the actual name
    from the user handle through the SC_User_GetLogin() method.

    \snippet scoreloopintegration/src/ScoreloopData.cpp 4

    However since this method returns a custom string class from the Scoreloop API, we convert it to a QString object inside
    the helper method asQString().

    \snippet scoreloopintegration/src/ScoreloopData.cpp 0
*/
