/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page twittertimeline
    \example twittertimeline
    \title Twitter Timeline Example

    \section1 Description

    The Twitter Timeline example demonstrates how to access a RESTful service that responds with JSON
    data and then display the results on the screen.

    \image twittertimeline-example.png

    \section1 Overview
    In this example we'll learn how to use the \c QNetworkAccessManager and \c JsonDataAccess classes to
    download tweets from the RESTful webservice and parse them into a model to visualize them in a \c ListView.

    The business logic of this application is encapsulated in the \c App class, which
    is exported to QML under the name '_timeline'.

    \section1 UI
    The UI of this sample consists of a \c TextField to enter the screen name and a \c Button to start
    the lookup for tweets with the given screen name. Whenever the user clicks the button, the requestTweets()
    method of the \c App object is invoked. The button is disabled while the lookup is in progress.

    \snippet twittertimeline/assets/main.qml 1

    If an error occurs during the lookup, the 'error' property of the \c App object becomes 'true', which
    makes the \c Label below the button visible. It will show the error message as provided by the \c App object.

    \snippet twittertimeline/assets/main.qml 2

    If the lookup is successful, the \c App object emits the tweetsLoaded() signal. After the UI is initialized,
    we connect the pushPane() function against this signal.

    \snippet twittertimeline/assets/main.qml 0

    The pushPane() function will push a page, that shows the tweets in a \c ListView, on the navigation pane.
    Since we want to have two different visual representations of the list, we have two different pages. One
    uses the standard list item component and the other uses a custom list item component.

    \snippet twittertimeline/assets/main.qml 4

    Both pages are loaded through \c{ComponentDefinition}s and the user can select which one is used through
    a \c SegmentedControl at the bottom of the screen.

    \snippet twittertimeline/assets/main.qml 3

    The standard appearance is implemented in StandardTimelineView.qml and uses the \c StandardListItem as
    \c ListItemComponent. As data model the \c ListView uses the model provided by the \c App object.

    \snippet twittertimeline/assets/StandardTimelineView.qml 0

    The page looks like the following:

    \image twittertimeline-example1.png

    The custom appearance is implemented in CustomTimelineView.qml and uses a custom control as \c ListItemComponent,
    consisting of two \c{Label}s below each other.

    \snippet twittertimeline/assets/CustomTimelineView.qml 0

    The page looks like the following:

    \image twittertimeline-example2.png

    \section1 The App class
    The \c App class encapsulates the business logic of this application. It provides methods to trigger the lookup
    of tweets, a property of type bb::cascades::DataModel that contains the found tweets and further properties to
    report the current state of the object (e.g. error or in-progress).

    \snippet twittertimeline/src/app.hpp 0

    Inside the constructor the model is initialized and the UI is loaded from main.qml file.

    \snippet twittertimeline/src/app.cpp 0

    Before a new request is issued, the reset() method is called, which clears any previous error information.

    \snippet twittertimeline/src/app.cpp 1

    When the user clicks the 'Timeline' button, the requestTweets() method is invoked with the screen name as parameter.
    If no lookup is currently running, we do a sanity check on the screen name and if everything is ok execute the lookup.
    The lookup on the network is encapsulated in a \c TwitterRequest object, which provides a signal complete() to notify
    us when the raw JSON data has been retrieved. We connect a custom slot against this signal and start the request.
    Afterwards we change the 'active' property of the \c App object to signal the UI that a lookup is in progress.

    \snippet twittertimeline/src/app.cpp 2

    When the network lookup is finished, the onTwitterTimeline() slot is invoked. There we first check whether an error occurred.
    In case of an error we update the 'error' and 'errorMessage' property of the \c App object and inform the UI about the
    change. Otherwise we call the helper method parseResponse().

    \snippet twittertimeline/src/app.cpp 3

    The parseResponse() method uses the \c JsonDataAccess class to parse the raw JSON data into a list of QVariantMaps, which
    can be inserted directly into our model.

    \snippet twittertimeline/src/app.cpp 4

    \section1 The TwitterRequest class
    The \c TwitterRequest class encapsulates the retrieval of data from the twitter webservice. It basically provides
    a method to trigger the lookup and a signal to notify when the lookup is finished.

    \snippet twittertimeline/src/TwitterRequest.hpp 0

    In requestTimeline() we create a new \c QNetworkAccessManager object, which will do the low-level HTTP network communication.
    It expects an URL as input parameter, which we assemble here from the REST API and the screen name.
    Calling \c{QNetworkAccessManager}'s get() method returns a \c QNetworkReply object, which acts as a handle to follow the
    status and progress of the network operation. We connect against its finished() signal to know when all data have been received.

    \snippet twittertimeline/src/TwitterRequest.cpp 0

    Inside the connected slot we check whether an error occurred and read the data from the \c QNetworkReply if the download
    was successful. At the end we emit the complete() signal with the JSON data or an error message as parameter.

    \snippet twittertimeline/src/TwitterRequest.cpp 1
*/
