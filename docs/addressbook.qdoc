/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page addressbook
    \example addressbook
    \title Address Book Example

    \section1 Description

    The Address Book example is a simple address book application to list, view,
    edit and delete the contacts available on the system or create new ones.

    \image addressbook-example.png
    \image addressbook-example1.png
    \image addressbook-example2.png

    \section1 Overview
    In this example we'll learn how to use the bb::pim::contact API of the BB10
    framework to work with the contacts available on the system.

    The application has a clean separation between business logic and UI representation.
    All the business logic is encapsulated inside the three C++ classes \c AddressBook, \c ContactViewer
    and \c ContactEditor. These classes use the bb::pim::contact API internally to communicate
    with the contact service of BB10 and provide all the necessary functionality and data to the UI
    via properties, signals and slots. The \c AddressBook object is exported to the UI under the name '_addressBook'.

    \section1 The UI
    The UI of this sample application consists of four pages:
    \list
        \o The main page
        \o The 'view contact' page
        \o The 'edit contact' page
        \o The 'create new contact' page
    \endlist

    \section2 The main page

    The main page contains a \c ListView that displays a list of contacts and a \c TextField where the user
    can type in a text which is used as filter criterion for the list.

    \snippet addressbook/assets/main.qml 0

    Whenever the content of the \c TextField is changed by the user, the 'filter' property of the exported \c AddressBook
    object is updated.

    \snippet addressbook/assets/main.qml 1

    The \c ListView uses the model provided by the \c AddressBook object as data model and shows the first name, last name
    and email properties inside the items.

    Whenever the user clicks on an item, setCurrentContact() is called on the \c AddressBook object, which will mark the
    selected contact as the 'current' contact for viewing and editing. Afterwards the viewContact() method is invoked
    on the \c AddressBook object. This will setup the \c ContactViewer object to make the data of the current contact
    available to the 'view contact' page. Finally, the 'view contact' page is pushed on the \c NavigationPane.

    \snippet addressbook/assets/main.qml 3

    This page is loaded dynamically from a \c ComponentDefinition that references the file ContactViewer.qml

    The main page also contains an \c ActionItem inside its action bar, which can be invoked by the user to
    create a new contact.

    \snippet addressbook/assets/main.qml 2

    When the action is triggered, the createContact() method is invoked on the \c AddressBook object, which will setup
    the \c ContactEditor object to be in creation mode. Afterwards the 'create new contact' page is pushed on the \c NavigationPane.
    This page is loaded dynamically from a \c ComponentDefinition that references the file ContactEditor.qml.

    \section2 The 'view contact' page

    The 'view contact' page is implemented inside ContactViewer.qml and retrieves all the data to display from the \c ContactViewer
    object, which is accessible as a property of the \c AddressBook object.

    \snippet addressbook/assets/ContactViewer.qml 0

    The UI of the page consists of a list of ViewerField objects (which are implemented in ViewerField.qml), one for each contact
    property (first name, last name, birthday and email address). These fields simply display a title text and a value text in a row.
    While the title texts are hard-coded, the value properties are bound against the properties provided by the \c ContactViewer
    object. So whenever the contact that is currently handled by the \c ContactViewer is changed, the UI will be updated automatically.

    \snippet addressbook/assets/ContactViewer.qml 1

    To edit or delete the currently displayed contact, the page contains two \c{ActionItem}s. If the one for deleting the contact is triggered,
    the deleteContact() method is invoked on the \c AddressBook object, which will call the appropriated methods on the bb::pim::contact API
    internally. If the action for editing the contact is triggered, the editContact() method is invoked on the \c AddressBook object, which will
    setup the \c ContactEditor object to be in editing mode and make the data of the current contact available to the 'edit contact' page.
    Afterwards the 'edit contact' page is pushed on the \c NavigationPane.

    \snippet addressbook/assets/ContactViewer.qml 2

    The 'edit contact' page is loaded dynamically from a \c ComponentDefinition that references the file ContactEditor.qml.

    \section2 The 'edit contact' and 'create new contact' page

    For creating a new contact or editing an existing one the same UI (ContactEditor.qml) is used. The underlying business object \c ContactEditor
    provides the property 'mode' to differ between the CreateMode and EditMode.

    The page contains two actions in its \c TitleBar to create/save the current contact or cancel the operation.

    \snippet addressbook/assets/ContactEditor.qml 1

    Depending on the current mode the title of the accept action is set to 'Create' or 'Save'. In both cases, an invocation of the action
    will call the saveContact() method on the \c ContactEditor object, which will do the right thing internally, depending on the current mode.

    If the user selects the dismiss action, the current page is popped from the \c NavigationPane.

    \snippet addressbook/assets/ContactEditor.qml 2

    For each property of a contact, the page contains an editor field (e.g. a \c TextField for the first name). Whenever the user changes
    the content of the field, the associated property of the \c ContactEditor object will be updated.

    If the UI is in EditMode, the content of the editor fields is initialized with the values from the \c ContactEditor object after the
    UI has been created.

    \snippet addressbook/assets/ContactEditor.qml 0

    \section1 The Business Logic

    To have a clean separation between business logic and UI, the business logic is implemented in the three C++ classes
    \c AddressBook, \c ContactViewer and \c ContactEditor.

    \section2 AddressBook
    The \c AddressBook class is the central point to access the business logic from within the UI. Therefor the object is exported
    to QML under the name '_addressBook' inside the main function.

    \snippet addressbook/src/main.cpp 1

    The \c AddressBook object provides the list of available contacts as a custom property 'model' of type bb::cascades::GroupDataModel,
    so that a \c ListView in the UI can use it directly as its data model. Additionally the \c AddressBook object provides a 'filter' property
    to define a filter string that is applied on the list of contacts.
    The other two business logic objects \c ContactViewer and \c ContactEditor can be accessed through the 'contactViewer' and 'contactEditor'
    properties.

    \snippet addressbook/src/AddressBook.hpp 0

    To use the \c ContactViewer and \c ContactEditor objects as property types, they must be registered to the QML type system inside the
    main function as well.

    \snippet addressbook/src/main.cpp 0

    Inside the constructor all member objects are initialized. The \c ContactService is the central point of the bb::pim::contact API
    to access contact information on the BB10 platform.

    \snippet addressbook/src/AddressBook.cpp 0

    The filterContacts() method retrieves all contacts that match the specified filter from the \c ContactService and fills the data model
    with the result. The ID of the contact is stored inside the model together with the data that will be displayed in the \c ListView.

    \snippet addressbook/src/AddressBook.cpp 7

    Whenever the user changes the filter criterion, the setFilter() method is invoked, which updates the filter value and calls
    the filterContacts() method again.

    \snippet addressbook/src/AddressBook.cpp 6

    Whenever the user selects a contact in the \c ListView, the setCurrentContact() method is invoked. If the selected index path
    is valid, the ID of the contact is extracted and stored as 'current' contact.

    \snippet addressbook/src/AddressBook.cpp 1

    Afterwards the UI invokes the viewContact() method, that triggers the \c ContactViewer to load the data for the current contact.

    \snippet addressbook/src/AddressBook.cpp 4

    If the user triggers the 'Delete' action from the 'view contact' page, deleteContact() is invoked, which forwards this
    request to the \c ContactService.

    \snippet addressbook/src/AddressBook.cpp 5

    If the user wants to edit the current contact, the UI calls editContact(), which triggers the \c ContactEditor to load the
    data of the current contact and switches the \c ContactEditor into EditMode.

    \snippet addressbook/src/AddressBook.cpp 3

    If the user wants to create a new contact, the UI calls createContact(), which resets the \c ContactEditor and switches it into CreateMode.

    \snippet addressbook/src/AddressBook.cpp 2

    \section2 ContactViewer
    The ContactViewer class is an UI-independent representation of the contact viewer, that provides all the functionality and data
    as slots and properties. It encapsulates all the logic of loading a contact from the persistent storage, provides its data as
    properties and updates the properties automatically if the contact has changed in the storage backend.

    \snippet addressbook/src/ContactViewer.hpp 0

    Inside the constructor the contactsChanged() signal of the \c ContactService is connected against the custom contactsChanged() slot
    to reload the currently displayed contact from the persistent storage if it has been changed by some other entity.

    \snippet addressbook/src/ContactViewer.cpp 0

    The method setContactId() is invoked by the \c AddressBook object to prepare the viewer to display a contact in the UI. In this
    method the passed ID is stored locally and updateContact() is called afterwards.

    \snippet addressbook/src/ContactViewer.cpp 3

    Inside updateContact() the actual contact data are loaded from the persistent storage through the \c ContactService object.
    If the value of a contact property has changed, the change notification signal is emitted.

    \snippet addressbook/src/ContactViewer.cpp 1

    The custom slot contactsChanged() checks whether the currently displayed contact is in the change set and calls updateContact() accordingly.

    \snippet addressbook/src/ContactViewer.cpp 2

    \section2 ContactEditor

    The ContactEditor class is an UI-independent representation of the contact editor, that provides all the functionality and data
    as slots and properties. It encapsulates all the logic of creating a new contact or updating an existing one.

    \snippet addressbook/src/ContactEditor.hpp 0

    Inside the constructor the member variables are initialized with the default values.

    \snippet addressbook/src/ContactEditor.cpp 1

    If the user wants to edit an existing contact, the \c AddressBook object invokes loadContact() to load the contact data from the
    persistent storage and make them available to the UI through the properties.

    \snippet addressbook/src/ContactEditor.cpp 2

    When the user clicks on the 'Create'/'Save' button in the UI, saveContact() is invoked. Depending on the current mode, a new contact
    is created or the current one modified. In both cases the \c ContactBuilder class is used to add or change the attributes of the \c Contact
    object.

    \snippet addressbook/src/ContactEditor.cpp 3

    To modify an existing attribute the helper function updateContactAttribute() has been implemented.

    \snippet addressbook/src/ContactEditor.cpp 0

    If the user wants to create a new contact, the \c AddressBook object invokes the reset() method to clear all fields of the \c ContactEditor.

    \snippet addressbook/src/ContactEditor.cpp 4
*/
